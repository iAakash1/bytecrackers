/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestContract,
  TestContractInterface,
} from "../../contracts/TestContract";

const _abi = [
  {
    inputs: [],
    name: "getName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234608b5760008054600190600181811c911680156082575b6020821014606e57601f81116048575b505060086315195cdd60e21b0190556101fe90816100918239f35b828052601f60208420910160051c8101905b81811060655750602d565b8381558201605a565b634e487b7160e01b83526022600452602483fd5b90607f1690601d565b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806306fdde0314610061576317d7de7c1461003357600080fd5b3461005e578060031936011261005e5761005a61004e610079565b6040519182918261017f565b0390f35b80fd5b503461005e578060031936011261005e5761005a61004e5b604051906000805460018160011c9060018316928315610175575b60209384841081146101615783885290811561014557506001146100f0575b505050829003601f01601f1916820167ffffffffffffffff8111838210176100da57604052565b634e487b7160e01b600052604160045260246000fd5b6000808052929350837f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b83851061013157505050508301013880806100b3565b80548886018301529301928490820161011b565b60ff1916878501525050151560051b84010190503880806100b3565b634e487b7160e01b86526022600452602486fd5b91607f1691610094565b6020808252825181830181905290939260005b8281106101b457505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161019256fea2646970667358221220a049e387e5ec551d0989dbb1facfb609227da3dedef079b15fe31f746212d96164736f6c63430008190033";

type TestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestContract__factory extends ContractFactory {
  constructor(...args: TestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestContract__factory {
    return super.connect(runner) as TestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestContractInterface {
    return new Interface(_abi) as TestContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestContract {
    return new Contract(address, _abi, runner) as unknown as TestContract;
  }
}
