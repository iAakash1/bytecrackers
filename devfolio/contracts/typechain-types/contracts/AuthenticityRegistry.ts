/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AuthenticityRegistry {
  export type VerificationResultStruct = {
    requestId: BytesLike;
    isAuthentic: boolean;
    confidenceScore: BigNumberish;
    aiModel: string;
    reasoning: string;
    timestamp: BigNumberish;
  };

  export type VerificationResultStructOutput = [
    requestId: string,
    isAuthentic: boolean,
    confidenceScore: bigint,
    aiModel: string,
    reasoning: string,
    timestamp: bigint
  ] & {
    requestId: string;
    isAuthentic: boolean;
    confidenceScore: bigint;
    aiModel: string;
    reasoning: string;
    timestamp: bigint;
  };
}

export interface AuthenticityRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allFlaggedContent"
      | "allRequestIds"
      | "allVerifiedContent"
      | "authenticityNFT"
      | "donID"
      | "emergencyFlagContent"
      | "flaggedContent"
      | "gasLimit"
      | "getAllFlaggedContent"
      | "getAllVerifiedContent"
      | "getStatistics"
      | "getUserRequests"
      | "getVerificationResult"
      | "handleOracleFulfillment"
      | "mintAuthenticityNFT"
      | "nftMintFee"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "requestVerification"
      | "sourceCode"
      | "subscriptionId"
      | "totalAuthentic"
      | "totalFake"
      | "totalNFTsMinted"
      | "totalVerifications"
      | "transferOwnership"
      | "unpause"
      | "updateChainlinkConfig"
      | "updateFees"
      | "userRequests"
      | "verificationFee"
      | "verificationRequests"
      | "verificationResults"
      | "version"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContentFlagged"
      | "FeesUpdated"
      | "FundsWithdrawn"
      | "NFTMinted"
      | "OwnershipTransferred"
      | "Paused"
      | "RequestFulfilled"
      | "RequestSent"
      | "Unpaused"
      | "VerificationCompleted"
      | "VerificationRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allFlaggedContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allRequestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allVerifiedContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticityNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyFlagContent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "flaggedContent",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllFlaggedContent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVerifiedContent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAuthenticityNFT",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftMintFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestVerification",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuthentic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalNFTsMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVerifications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateChainlinkConfig",
    values: [BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationResults",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allFlaggedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allVerifiedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticityNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFlagContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flaggedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllFlaggedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVerifiedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAuthenticityNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftMintFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sourceCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAuthentic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalNFTsMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChainlinkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace ContentFlaggedEvent {
  export type InputTuple = [
    ipfsHash: string,
    reporter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    ipfsHash: string,
    reporter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    ipfsHash: string;
    reporter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    verificationFee: BigNumberish,
    nftMintFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    verificationFee: bigint,
    nftMintFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    verificationFee: bigint;
    nftMintFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [owner: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMintedEvent {
  export type InputTuple = [
    ipfsHash: string,
    owner: AddressLike,
    tokenId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    ipfsHash: string,
    owner: string,
    tokenId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    ipfsHash: string;
    owner: string;
    tokenId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationCompletedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    ipfsHash: string,
    isAuthentic: boolean,
    confidenceScore: BigNumberish,
    aiModel: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    ipfsHash: string,
    isAuthentic: boolean,
    confidenceScore: bigint,
    aiModel: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    requestId: string;
    ipfsHash: string;
    isAuthentic: boolean;
    confidenceScore: bigint;
    aiModel: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    requester: AddressLike,
    ipfsHash: string,
    mediaType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    requester: string,
    ipfsHash: string,
    mediaType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    requestId: string;
    requester: string;
    ipfsHash: string;
    mediaType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuthenticityRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AuthenticityRegistry;
  waitForDeployment(): Promise<this>;

  interface: AuthenticityRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allFlaggedContent: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  allRequestIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allVerifiedContent: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  authenticityNFT: TypedContractMethod<[], [string], "view">;

  donID: TypedContractMethod<[], [string], "view">;

  emergencyFlagContent: TypedContractMethod<
    [_ipfsHash: string],
    [void],
    "nonpayable"
  >;

  flaggedContent: TypedContractMethod<[arg0: string], [boolean], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  getAllFlaggedContent: TypedContractMethod<[], [string[]], "view">;

  getAllVerifiedContent: TypedContractMethod<[], [string[]], "view">;

  getStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalVerifications_: bigint;
        totalAuthentic_: bigint;
        totalFake_: bigint;
        totalNFTsMinted_: bigint;
      }
    ],
    "view"
  >;

  getUserRequests: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getVerificationResult: TypedContractMethod<
    [_ipfsHash: string],
    [AuthenticityRegistry.VerificationResultStructOutput],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  mintAuthenticityNFT: TypedContractMethod<
    [_ipfsHash: string],
    [bigint],
    "payable"
  >;

  nftMintFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestVerification: TypedContractMethod<
    [_ipfsHash: string, _mediaType: string],
    [string],
    "payable"
  >;

  sourceCode: TypedContractMethod<[], [string], "view">;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  totalAuthentic: TypedContractMethod<[], [bigint], "view">;

  totalFake: TypedContractMethod<[], [bigint], "view">;

  totalNFTsMinted: TypedContractMethod<[], [bigint], "view">;

  totalVerifications: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateChainlinkConfig: TypedContractMethod<
    [
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _donID: BytesLike,
      _sourceCode: string
    ],
    [void],
    "nonpayable"
  >;

  updateFees: TypedContractMethod<
    [_verificationFee: BigNumberish, _nftMintFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  userRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verificationFee: TypedContractMethod<[], [bigint], "view">;

  verificationRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        requester: string;
        ipfsHash: string;
        mediaType: string;
        timestamp: bigint;
        isProcessed: boolean;
        isAuthentic: boolean;
        confidenceScore: bigint;
        aiModel: string;
        nftTokenId: bigint;
      }
    ],
    "view"
  >;

  verificationResults: TypedContractMethod<
    [arg0: string],
    [
      [string, boolean, bigint, string, string, bigint] & {
        requestId: string;
        isAuthentic: boolean;
        confidenceScore: bigint;
        aiModel: string;
        reasoning: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allFlaggedContent"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allRequestIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allVerifiedContent"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "authenticityNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "donID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyFlagContent"
  ): TypedContractMethod<[_ipfsHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "flaggedContent"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "gasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllFlaggedContent"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllVerifiedContent"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalVerifications_: bigint;
        totalAuthentic_: bigint;
        totalFake_: bigint;
        totalNFTsMinted_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRequests"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVerificationResult"
  ): TypedContractMethod<
    [_ipfsHash: string],
    [AuthenticityRegistry.VerificationResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintAuthenticityNFT"
  ): TypedContractMethod<[_ipfsHash: string], [bigint], "payable">;
  getFunction(
    nameOrSignature: "nftMintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestVerification"
  ): TypedContractMethod<
    [_ipfsHash: string, _mediaType: string],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sourceCode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAuthentic"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalNFTsMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVerifications"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateChainlinkConfig"
  ): TypedContractMethod<
    [
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _donID: BytesLike,
      _sourceCode: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [_verificationFee: BigNumberish, _nftMintFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verificationRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        requester: string;
        ipfsHash: string;
        mediaType: string;
        timestamp: bigint;
        isProcessed: boolean;
        isAuthentic: boolean;
        confidenceScore: bigint;
        aiModel: string;
        nftTokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationResults"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, boolean, bigint, string, string, bigint] & {
        requestId: string;
        isAuthentic: boolean;
        confidenceScore: bigint;
        aiModel: string;
        reasoning: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ContentFlagged"
  ): TypedContractEvent<
    ContentFlaggedEvent.InputTuple,
    ContentFlaggedEvent.OutputTuple,
    ContentFlaggedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "NFTMinted"
  ): TypedContractEvent<
    NFTMintedEvent.InputTuple,
    NFTMintedEvent.OutputTuple,
    NFTMintedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationCompleted"
  ): TypedContractEvent<
    VerificationCompletedEvent.InputTuple,
    VerificationCompletedEvent.OutputTuple,
    VerificationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRequested"
  ): TypedContractEvent<
    VerificationRequestedEvent.InputTuple,
    VerificationRequestedEvent.OutputTuple,
    VerificationRequestedEvent.OutputObject
  >;

  filters: {
    "ContentFlagged(string,address,uint256)": TypedContractEvent<
      ContentFlaggedEvent.InputTuple,
      ContentFlaggedEvent.OutputTuple,
      ContentFlaggedEvent.OutputObject
    >;
    ContentFlagged: TypedContractEvent<
      ContentFlaggedEvent.InputTuple,
      ContentFlaggedEvent.OutputTuple,
      ContentFlaggedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "NFTMinted(string,address,uint256,uint256)": TypedContractEvent<
      NFTMintedEvent.InputTuple,
      NFTMintedEvent.OutputTuple,
      NFTMintedEvent.OutputObject
    >;
    NFTMinted: TypedContractEvent<
      NFTMintedEvent.InputTuple,
      NFTMintedEvent.OutputTuple,
      NFTMintedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerificationCompleted(bytes32,string,bool,uint256,string,uint256)": TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;
    VerificationCompleted: TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;

    "VerificationRequested(bytes32,address,string,string,uint256)": TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
    VerificationRequested: TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
  };
}
